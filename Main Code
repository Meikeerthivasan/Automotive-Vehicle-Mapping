clc
fc = 77e9;
c = 3e8;
range_max = 200;
% sweep time should be 5-6 times the rtt
time = 5.5*range2time(range_max,c); %Range between is converted from 
range to time
%range resolution which will help us to distinguish between target
range_res = 1; 
%the range2bw gies the band wisth bearing the rannge resolution ,c 
refers the propagation speed
bw = range2bw(range_res,c);
sweep_slope = bw/time;
%linear FMCW -> Beat frequency
fr_max = range2beat(range_max,sweep_slope,c); 
% Maximum speed of vechicle = 150km/hr -> m/s
lambda = c/fc;
v_max = 150*10/36; 
fd_max = speed2dop(2*v_max,lambda); % Dopple frequency
fb_max = fr_max+fd_max; % Maximum beat frequnecy
fs = max(2*fb_max,bw); %150MHz
waveform = 
phased.FMCWWaveform('SweepTime',time,'SweepBandwidth',bw,'SampleRate',
fs);
sig = waveform();
subplot(211); plot(0:1/fs:time-1/fs,real(sig));
xlabel('Time (s)'); 
ylabel('Amplitude (v)');
title('FMCW signal'); 
subplot(212); 
spectrogram(sig,32,16,32,fs,'yaxis');
%Dividing the signal into sections of length 32.
%16 refers the samples used.
10
%Evaluating the spectrum at 32/2+1=17 frequencies 
title('FMCW signal spectrum');
% Simulation
car_dist = 70;
car_speed = 96;
car_rcs = db2pow(min(10*log10(car_dist)+5,20)); %Radar Cross Section 
where the db is converted to power
%For fixing a target and to choose whether polaraized or non 
polaraized
%Instead of mean RCS we can use polaraization as TRUE but we use 
radar
%cross section we simulated to get diserable output
cartarget = 
phased.RadarTarget('MeanRCS',car_rcs,'PropagationSpeed',c,'OperatingFr
equency',fc);
%For modeling the translational motion of objects in space
carmotion = 
phased.Platform('InitialPosition',[car_dist;0;0.5],'Velocity',[car_spe
ed;0;0]); 
%For narrow band signal propagation from one point to another 
channel = 
phased.FreeSpace('PropagationSpeed',c,'OperatingFrequency',fc,'SampleR
ate',fs,'TwoWayPropagation',true);
%SYSTEM SETUP
ant_aperture = 6.06e-4; % in square meter
ant_gain = aperture2gain(ant_aperture,lambda); % in dB
tx_ppower = db2pow(5)*1e-3; % in watts
tx_gain = 9+ant_gain; % in dB
rx_gain = 15+ant_gain; % in dB
rx_nf = 4.5; 
% The receiver will have some noise factor that we are mentioning so 
it could more like a real world simulation
transmitter = 
phased.Transmitter('PeakPower',tx_ppower,'Gain',tx_gain);
receiver = 
phased.ReceiverPreamp('Gain',rx_gain,'NoiseFigure',rx_nf,'SampleRate',
fs);
11
% SIGNAL SETUP
radar_speed = 100;
radarmotion = 
phased.Platform('InitialPosition',[0;0;0.5],'Velocity',[radar_speed;0;
0]);
specanalyzer = 
dsp.SpectrumAnalyzer('SampleRate',fs,'PlotAsTwoSidedSpectrum',true,'Ti
tle','Spectrum for received and dechirped signal','ShowLegend',true);
rng(); %random number generator
% The Received signal is dechirped and saved in a buffer and 64 is the 
number of sweeps
% we can even use 8,16,32 sweeps but for better accuracy 64 sweeps is 
used
Nsweep = 64; 
demo = complex(zeros(waveform.SampleRate*waveform.SweepTime,Nsweep));
for n = 1:Nsweep
 % Update radar and target positions
 [radar_pos,radar_vel] = radarmotion(waveform.SweepTime);
 [target_pos,target_vel] = carmotion(waveform.SweepTime);
 % Transmit FMCW waveform
 sig = waveform();
 txsig = transmitter(sig);
 % Propagate the signal and reflect off the target
 txsig = channel(txsig,radar_pos,target_pos,radar_vel,target_vel);
 txsig = cartarget(txsig);
 % Dechirp the received radar return
 txsig = receiver(txsig);
 dechirpsig = dechirp(txsig,sig);
 % Visualize the spectrum
 specanalyzer([txsig dechirpsig]);
 %channel-1 = received signal
 %channel-2 = decyphered signal
 demo(:,n) = dechirpsig;
end
rngdopresp = 
phased.RangeDopplerResponse('PropagationSpeed',c,'DopplerOutput','Spee
12
d','OperatingFrequency',fc,'SampleRate',fs,'RangeMethod','FFT','SweepS
lope',sweep_slope,'RangeFFTLengthSource','Property','RangeFFTLength',2
048,'DopplerFFTLengthSource','Property','DopplerFFTLength',256);
plotResponse(rngdopresp,demo); % Plot range 
Doppler map
axis([-v_max,v_max,0,range_max])
clim = caxis;
%Reducing the sampling rate and estimating the distance and velocity
Dn = fix(fs/(2*fb_max));
for m = size(demo,2):-1:1
 demo1(:,m) = decimate(demo(:,m),Dn,'FIR');
end
fs1 = fs/Dn;
fbrange = rootmusic(pulsint(demo1,'coherent'),1,fs1); %finding range 
with beat frequency
rangeest = beat2range(fbrange,sweep_slope,c); %Range 
estimation
peak_loc = val2ind(rangeest,c/(fs1*2));
fd = -rootmusic(demo1(peak_loc,:),1,1/time); %Estimates the 
frequency in input signal and gives vector of frequerncy in radian / 
samples
velocityest = dop2speed(fd,lambda)/2;
% Trial_Trackin_Driving_Simulation
% Azimuthus angle - The angle between the x-axis and the projection of 
a direction vector onto the xy-plane
scenario = drivingScenario;
car2 = 
actor(scenario,'ClassID',1,'Length',0.2,'Width',0.45,'Height',1.5); 
%Class ID is scene
Carsimulation = vehicle(scenario,'ClassID',1);
car2.Position = [0 2 0];
Carsimulation.Position = [0 -2 0];
plot(scenario)
ylim([-4 4])
%For 3D view
zlim([0 4])
view(-60,30)
scenario = drivingScenario;
road(scenario, [0 0; 10 0; 53 -20],'lanes',lanespec(2));
13
%Road function - For creating the scenario the road specs must be 
given
% in matric format, The first row of the matric signifies the start 
and the
% last row of the matrix here [53 -20] signifies the end
plot(scenario,'Waypoints','on')
Car_obstacle = vehicle(scenario,'ClassID',1,'Position',[25 -5.5 
0],'Yaw',-22);
Carsimulation = vehicle(scenario,'ClassID',1); 
waypoints = [1 -1.5; 16.36 -2.5; 17.35 -2.765; 23.83 -2.01; 24.9 -2.4; 
50.5 -16.7];
speed = 90; 
smoothTrajectory(Carsimulation,waypoints,speed)
